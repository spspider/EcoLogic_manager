#include <PicoMQTT.h>

#if __has_include("config.h")
#include "config.h"
#endif

#ifndef WIFI_SSID
#define WIFI_SSID "Home_2"
#endif

#ifndef WIFI_PASSWORD
#define WIFI_PASSWORD "sp5506487sp"
#endif

const char* MQTT_SERVER = "177e3ee7cf004e6ebed04b25d4c51a26.s1.eu.hivemq.cloud";
const int MQTT_PORT = 8883;
const char* MQTT_USER = "dev01";
const char* MQTT_PASS = "5506487";

PicoMQTT::Client mqtt(MQTT_SERVER, MQTT_PORT, MQTT_USER, MQTT_PASS);

unsigned long last_publish_time = 0;
int greeting_number = 1;

void setup_PICOMQTT() {
    // Setup serial
    Serial.begin(115200);

    // Connect to WiFi
    Serial.printf("Connecting to WiFi %s\n", WIFI_SSID);
    WiFi.mode(WIFI_STA);
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    while (WiFi.status() != WL_CONNECTED) { delay(1000); }
    Serial.println("WiFi connected.");

    // Subscribe to a topic and attach a callback
    mqtt.subscribe("picomqtt/#", [](const char * topic, const char * payload) {
        // payload might be binary, but PicoMQTT guarantees that it's zero-terminated
        Serial.printf("Received message in topic '%s': %s\n", topic, payload);
    });

    mqtt.begin();
}

void loop_PICOMQTT() {
    mqtt.loop();

    // Publish a greeting message every 3 seconds.
    if (millis() - last_publish_time >= 3000) {
        // We're publishing to a topic, which we're subscribed too.
        // The broker should deliver the messages back to us.
        String topic = "picomqtt/esp-" + WiFi.macAddress();
        String message = "Hello #" + String(greeting_number++);
        Serial.printf("Publishing message in topic '%s': %s\n", topic.c_str(), message.c_str());
        mqtt.publish(topic, message);
        last_publish_time = millis();
    }
}

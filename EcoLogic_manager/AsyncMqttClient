#include <ESP8266WiFi.h>
#include <Ticker.h>
#include <AsyncMqttClient.h>


AsyncMqttClient mqttClient;
Ticker mqttReconnectTimer;

WiFiEventHandler wifiConnectHandler;
WiFiEventHandler wifiDisconnectHandler;
Ticker wifiReconnectTimer;

// uint8_t oldtime = 0;
// uint8_t nWidgets = N_WIDGECTS;
// const uint8_t nWidgetsArray = N_WIDGECTS;
// short int stat[nWidgetsArray];
// char descr[nWidgetsArray][10];
// uint8_t id[nWidgetsArray];
// uint8_t pin[nWidgetsArray];
// short int defaultVal[nWidgetsArray];
// uint8_t IrButtonID[nWidgetsArray];
// float analogDivider = 1.0F;
// short int analogSubtracter = 0;
// unsigned int low_pwm[nWidgetsArray];
// bool low_pwm_off = false;
// uint8_t pinmode[nWidgetsArray];

// uint8_t subscribe_loop = 0;
// uint8_t subscr_sec = 5;
// uint8_t mqttspacing_oldtime;



void connectToMqtt() {
  Serial.println("Connecting to MQTT...");
  mqttClient.connect();
}

void onWifiConnect(const WiFiEventStationModeGotIP& event) {
  Serial.println("Connected to Wi-Fi.");
  connectToMqtt();
}

void onWifiDisconnect(const WiFiEventStationModeDisconnected& event) {
  Serial.println("Disconnected from Wi-Fi.");
  mqttReconnectTimer.detach();
  wifiReconnectTimer.once(2, connectToWifi);
}

void onMqttConnect(bool sessionPresent) {
  Serial.println("Connected to MQTT.");
  Serial.print("Session present: ");
  Serial.println(sessionPresent);
  subscribe_loop = 0;
}

void onMqttDisconnect(AsyncMqttClientDisconnectReason reason) {
  Serial.println("Disconnected from MQTT.");
  if (WiFi.isConnected()) {
    mqttReconnectTimer.once(2, connectToMqtt);
  }
}

void onMqttSubscribe(uint16_t packetId, uint8_t qos) {
  Serial.println("Subscribe acknowledged.");
  Serial.print("  packetId: ");
  Serial.println(packetId);
  Serial.print("  qos: ");
  Serial.println(qos);
}

void onMqttUnsubscribe(uint16_t packetId) {
  Serial.println("Unsubscribe acknowledged.");
  Serial.print("  packetId: ");
  Serial.println(packetId);
}

void onMqttMessage(char* topic, char* payload, AsyncMqttClientMessageProperties properties, size_t len, size_t index, size_t total) {
  char *lastSlash = strrchr(topic, '/');
  char i = 0;
  if (lastSlash != NULL && *(lastSlash + 1) != '\0') {
    int temp = atoi(lastSlash + 1);
    i = (char)temp;
  }
  char payloadBuffer[len + 1];
  strncpy(payloadBuffer, payload, len);
  payloadBuffer[len] = '\0';
  char *end;
  int newValue = strtol(payloadBuffer, &end, 10);
  callback_socket(i, newValue);
  Serial.print("callback:");
  Serial.print((int)i);
  Serial.print(" Payload: ");
  Serial.println(newValue);
  char sTopic_ch[24];
  snprintf(sTopic_ch, sizeof(sTopic_ch), "%s/%d/status", deviceID, (int)i);
  mqttClient.publish(sTopic_ch, 0, true, payloadBuffer);
}

void onMqttPublish(uint16_t packetId) {
  Serial.println("Publish acknowledged.");
  Serial.print("  packetId: ");
  Serial.println(packetId);
}

void pubConfig() {
  for (uint8_t i = 0; i < nWidgets; i++) {
    char sTopic_ch[20];
    snprintf(sTopic_ch, sizeof(sTopic_ch), "%s/%d", deviceID, i);
    char payload[16];
    snprintf(payload, sizeof(payload), "%d", stat[i]);
    mqttClient.publish(sTopic_ch, 0, true, payload);
  }
}

void setup() {
  Serial.begin(115200);
  Serial.println();
  Serial.println();
  wifiConnectHandler = WiFi.onStationModeGotIP(onWifiConnect);
  wifiDisconnectHandler = WiFi.onStationModeDisconnected(onWifiDisconnect);
  mqttClient.onConnect(onMqttConnect);
  mqttClient.onDisconnect(onMqttDisconnect);
  mqttClient.onSubscribe(onMqttSubscribe);
  mqttClient.onUnsubscribe(onMqttUnsubscribe);
  mqttClient.onMessage(onMqttMessage);
  mqttClient.onPublish(onMqttPublish);
  mqttClient.setServer(mqttServerName, mqttport);
  connectToWifi();
}

void loop() {
  // Non-blocking, handled by async events
  if (mqttClient.connected()) {
    unsigned long now = millis() / 1000;
    if (now > oldtime + subscr_sec && subscribe_loop < nWidgets) {
      char topic_subscr[30];
      if ((pinmode[subscribe_loop] == 2) || (pinmode[subscribe_loop] == 3) || (pinmode[subscribe_loop] == 5)) {
        snprintf(topic_subscr, sizeof(topic_subscr), "%s/%d", deviceID, subscribe_loop);
        mqttClient.subscribe(topic_subscr, 0);
        Serial.println(String("subscribe:") + topic_subscr);
        subscribe_loop++;
        oldtime = now;
      } else {
        subscribe_loop++;
      }
    }
    if (now > mqttspacing_oldtime + mqttspacing) {
      for (uint8_t i = 0; i < nWidgets; i++) {
        float x = get_new_pin_value(i);
        stat[i] = (int)x;
        char sTopic_ch[20];
        snprintf(sTopic_ch, sizeof(sTopic_ch), "%s/%d/status", deviceID, i);
        char payload[16];
        snprintf(payload, sizeof(payload), "%.2f", x);
        mqttClient.publish(sTopic_ch, 0, true, payload);
      }
      mqttspacing_oldtime = now;
    }
  }
}

